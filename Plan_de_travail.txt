### PLAN DE TRAVAIL
1 - Énoncé:
Projet "Regalia" (Système de diffusion et performance musicale acousmatique en temps réel par capture de mouvement)

2 - Description:
Ce système est constitué de deux dispositifs employés par un utilisateur afin d'exécuter une musique spatialisée en temps réel. L'exécution d'une composition par enclenchement de banques de son (et leur modification via des gels temporels, boucles et panoramisation) est déterminée par l'utilisateur grâce à un contrôleur appelé "l'orbe". Les paramètres de mouvement et de positionnement sont capturés par un ensemble de capteurs (le "sceptre") qui est manipulé par l'utilisateur afin de diffuser une musique dans l'espace. Le système sera utilisé dans un environnement de haut-parleurs disposés en cercle.

3 - Analyses des besoins:
# Sceptre: Capteur d'orientation fixé sur un bâton. L'orientation est reliée au volume du son. C'est l'utilisateur qui le déplace pour panoramiser le son.
# Orbe: Contrôleur HID.  Il a des touches effectuant des commandes différentes.
  - Gel de position: Crée une copie d'un paramètre de positionnement qui reste figé à cette valeur aussi longtemps que l'utilisateur le désire.
  -Gel d'orientation: Fige le paramètre d'orientation du sceptre, fixant ainsi le volume.
  -Boucle: Fait boucler le dernier mouvement effectué (ex: la dernière seconde) aussi longtemps que l'utilisateur le désire.
  -Enclenchement: Enclenche une section de pièce contenant des boucles prédéterminées. Il est aussi possible au sein de ces sections d'enclencher des sons individuellement.
  -Arrêt: Empêche le sceptre d'envoyer de l'information.
#"Partition" numérique: Ensemble de presets et de commandes qui permettent d'orchestrer le son et de déclencher les différents granulateurs du patch Max4Live.

4 - Recherche: 
#Sceptre: Le capteur d'orientation utilisé est le BNO055 d'Adafruit. Il sera relié à un microcontrôleur Arduino afin de recevoir les données.  La position du capteur sur l'axe horizontal permettra d'indiquer à VBAP (dans Max4Live) vers quelle chaîne le son devra sortir.  La rotation vertical sera utilisée pour contrôler le volume.
#Orbe: Il s'agit d'une manette de Wii tenue dans la main. Le mapping de ses boutons est fait via Max4Live, qui reçoit ses données en Bluetooth, puis en HID. Les commandes de la manette permettent de contrôler le flux de données du sceptre.
5 - Modèle:
Le modèle utilisé est celui d'une table de mixage traditionnellement utilisée en acousmatique. Il doit être possible pour Regalia de reproduire les mouvements normalement possibles sur ce dispositif mais dans les airs. La transposition du médium originel à ce genre de système par capture de mouvement introduit certaines restrictions, puisqu'il n'est possible d'allumer qu'un seul potentiomètre à la fois (le sceptre représentant le potentiomètre précis que l'on veut affecter et son orientation représentant la quantité de volume qu'on laisse passer). Ces restrictions sont amoindries par l'inclusion de l'orbe, qui permet de multilplier et d'altérer les comportements du sceptre afin de donner une liberté créatrice équivalente à celle de la table de mixage, mais avec l'aisance de la capture de mouvement.

6 - Méthode:
Un capteur d'orientation est fixé sur le sceptre tenu dans la main de l'utilisateur. L'information sur la position et l'orientation du capteur sont envoyés à un programme qui l'associe à la position d'un ou des hauts-parleurs. Si l'ordinateur reçoit l'information que le sceptre n'est plus à sa position verticale par défaut, il augmente le volume de sortie du ou des hauts-parleurs reliés à la position actuelle par rapport à l'ampleur de la rotation du sceptre. 
L'orbe sert de manette pouvant jouer avec la réception de paramètres par l'ordinateur. Il peut "geler" la réception de nouveaux paramètres, les faire boucler, etc. Ses fonctions de modifications de paramètres sont reliés au programme lui-même.

7 - Implémentation:
Les plateformes utilisées sont les suivantes: Arduino IDE, Max4Live et Ableton Live
Le capteur de rotation envoie ses données à l'Arduino (Pré-programmé avec l'IDE d'Arduino) qui relaie son information à Max4Live. Le patch Max4Live analyse toutes les informations reçues (de position et d'amplitude) et les associe avec des channels pré-déterminées correspondant aux hauts-parleurs disposés en cercle. Ces informations peuvent tout au courant de la vie du programme être modifiées par l'orbe, qui peut actionner certaines routines modifiant le flux d'information. Toute l'information reçue grâce à l'objet udpreceive est relayée à VBAP, qui les associe à la panoramisation et à l'amplitude. Elle sont aussi envoyées à un granulateur (conçu par Olivier Bélanger), qui permet de générer le son qui sort des haut-parleurs. Il est ainsi possible à la fois de modifier le son produit et l'endroit où ce sont est diffusé en temps réel.


8 - Test et maintenance:
Processus mené à bien, avec très peu de bugs. Problèmes de CPU causés par le nombre d'instances présentes dans chaque objet poly à l'intérieur des granulateurs. Résolu en baissant le nombre d'instances de grains.
Problèmes récurrents de connectivité durant le développement. Résolus grâce à l'utilisation d'un routeur afin de transférer les données de l'IMU, ainsi qu'un capteur Bluetooth 4.0 configuré pour fonctionner avec les stacks Bluetooth de Toshiba (il s'agit des seuls qui peuvent communiquer avec la manette de Wii en Bluetooth).

Le programme fonctionne très bien et offre plusieurs issues de développement futur: orchestration plus poussée (programmation de nouveaux fonctionnements de la manette de Wii), meilleur mixage (compression/EQ multibandes), tests dans un environnement de haut-parleurs en dôme. Il serait aussi possible d'essayer l'instrument avec d'autres samples et sources sonores pour plus de variété. Les possibilités sont multiples.
